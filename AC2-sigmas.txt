local Workspace = findfirstchild(Game,"Workspace")
local Loots = findfirstchild(Workspace, "Loot")
local Camera = findfirstchild(Workspace, "Character")
local Table = {Models = {}}


local ProcessedItems = {
    List = {},
    LastUpdate = 0
}


local function cleanupItem(item, index)
    if Table.Models[item] then
        Table.Models[item].Drawing:Remove()
        Table.Models[item] = nil 
    end
end

local function nexthings(path)
    local Holder = {}
    local things = getchildren(path)
    if things then 
        for _, v in ipairs(things) do
            table.insert(Holder, v)
        end
    end
    return Holder
end

local function updateThings()
    for item, data in pairs(Table.Models) do
        if not item or not getparent(item) then
            cleanupItem(item)
        end
    end

    for _, v in ipairs(getchildren(Loots)) do
        local things = nexthings(v)
        for _, item in ipairs(things) do
            if not Table.Models[item] and item and getparent(item) then
                Table.Models[item] = {
                    Value = item,
                    Drawing = Drawing.new("Text")
                }
            end
        end
    end
end

local function processItems()
    local success, error = pcall(function()
        while true do
            local CamPos = getposition(Camera)
            
            ProcessedItems.List = {}
            
            for item, data in pairs(Table.Models) do
                if item and getparent(item) then
                    local success, Position = pcall(function()
                        return {
                            x = getmemoryvalue(item, 0xec, "float"),
                            y = getmemoryvalue(item, 0xf0, "float"),
                            z = getmemoryvalue(item, 0xf4, "float")
                        }
                    end)
                    
                    if success then
                        local Distance = math.floor(math.sqrt(
                            (Position.x - CamPos.x)^2 + 
                            (Position.y - CamPos.y)^2 + 
                            (Position.z - CamPos.z)^2
                        ))
                        
                        if Distance <= 1000 then
                            table.insert(ProcessedItems.List, {
                                Drawing = data.Drawing,
                                Position = Position,
                                Name = item,
                                Distance = Distance
                            })
                        else
                            data.Drawing.Visible = false
                        end
                    else
                        cleanupItem(item)
                    end
                else
                    
                    cleanupItem(item)
                end
            end           
            
            wait(1)
        end
    end)
    if not success then
        warn("Error in processItems function:", error)
    end
end

local function getChests()
    local success, error = pcall(function()
        local cachedChests = {}
        while true do
            local current = tick()
            if not cachedChests.Lastupdate or current - cachedChests.Lastupdate > 0.5 then
                updateThings()
                cachedChests.Lastupdate = current
            end
            wait(5)
        end
    end)
    if not success then
        warn("Error in getChests function:", error)
    end
end

local function draw()
    local success, error = pcall(function()
        while true do 
            for _, item in ipairs(ProcessedItems.List) do
                local Pos2D, OnScreen = worldtoscreenpoint({item.Position.x, item.Position.y, item.Position.z})
                
                if item.Name and getparent(item.Name) then
                    if Pos2D then
                        if OnScreen then
                            item.Drawing.Text = string.format("[%s][%d]", getname(item.Name), item.Distance)
                            item.Drawing.Color = {255, 255, 255}
                            item.Drawing.Size = 9
                            item.Drawing.Center = true
                            item.Drawing.Outline = true
                            item.Drawing.Visible = true
                            item.Drawing.OutlineColor = {0, 0, 0}
                            item.Drawing.Font = 2
                            item.Drawing.Position = {Pos2D.x, Pos2D.y}
                        else
                            item.Drawing.Visible = false
                        end
                    else
                        cleanupItem(item.Name)
                    end
                else
                    cleanupItem(item.Name)
                end
            end
            
            
            wait()
        end
    end)
    if not success then
        warn("Error in draw function:", error)
    end
end


spawn(getChests)
spawn(processItems)
spawn(draw)
